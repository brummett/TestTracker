#!/usr/bin/perl

use strict;
use warnings;

use Cwd qw(cwd);
use TestTracker::Config;
use TestTracker;

my %config = TestTracker::Config::load();

my $test_name = shift @ARGV;
my ($git_test_name) = TestTracker::rel2git($test_name);

# TODO fork to catch when do exits
my $elapsed_time = -1;
{
    local ($@, $!) = (undef, undef);
    my $start_time = time;
    my $cwd = cwd();
    my $rv = do $test_name;
    unless (defined $rv) {
        my $error = $@ || $!;
        printf("ERROR: $error\n");
        exit 1;
    }
    $elapsed_time = time - $start_time;

    # in case the test does a chdir
    unless (cwd() eq $cwd) {
        chdir($cwd);
    }
}

my @module_names = get_module_names(\%config);

my $dbh = TestTracker::db_connection();
upsert_test($dbh, $config{db_prefix}, $git_test_name, $elapsed_time);
upsert_modules($dbh, $config{db_prefix}, @module_names);
$dbh->commit();

my $test_id = TestTracker::get_test_id($dbh, $config{db_prefix}, $git_test_name);
replace_bridge_entries($dbh, $config{db_prefix}, $test_id, @module_names);
$dbh->commit();
$dbh->disconnect();

sub get_module_names {
    my %config = %{(shift)};

    my $git_base_dir = TestTracker::git_base_dir();
    my @inc_paths = values %INC;
    my @git_inc_paths = grep { /^${git_base_dir}/ } @inc_paths;
    return unless @git_inc_paths;

    my @git_files = TestTracker::abs2git(@git_inc_paths);
    my @module_names = grep { /$config{module_regex}/ } @git_files;
    return @module_names;
}

sub upsert_test {
    my ($dbh, $db_prefix, $git_test_name, $duration) = @_;

    my $insert_test_or_ignore_sth = $dbh->prepare(qq{INSERT INTO ${db_prefix}test (name) VALUES (?) EXCEPT (SELECT name FROM ${db_prefix}test WHERE name = ?)});
    $insert_test_or_ignore_sth->execute($git_test_name, $git_test_name);

    my $update_test_duration_sth = $dbh->prepare(qq{UPDATE ${db_prefix}test SET duration = ? WHERE name = ?});
    $update_test_duration_sth->execute($duration, $git_test_name);
}

sub upsert_modules {
    my ($dbh, $db_prefix, @module_names) = @_;
    my $insert_module_or_ignore_sth = $dbh->prepare(qq{INSERT INTO ${db_prefix}module (name) VALUES (?) EXCEPT (SELECT name FROM ${db_prefix}module WHERE name = ?)});
    for my $module_name (@module_names) {
        $insert_module_or_ignore_sth->execute($module_name, $module_name);
    }
}

sub replace_bridge_entries {
    my ($dbh, $db_prefix, $test_id, @module_names) = @_;

    my $delete_model_test_sth = $dbh->prepare(qq{DELETE FROM ${db_prefix}module_test WHERE test_id = ?});
    $delete_model_test_sth->execute($test_id);

    for my $module_id (get_module_ids($dbh, $db_prefix, @module_names)) {
        $dbh->do(qq{INSERT INTO ${db_prefix}module_test (module_id, test_id) values ('$module_id', '$test_id')});
    }
}

sub get_module_ids {
    my ($dbh, $db_prefix, @module_names) = @_;
    unless (@module_names) {
        die "One or more Genome modules should always be loaded or we can't track it properly.";
    }
    my $sql = sprintf(qq{SELECT id FROM ${db_prefix}module WHERE name IN (%s)}, join(', ', map { '?' } @module_names));
    return map { $_->[0] } @{$dbh->selectall_arrayref($sql, {}, @module_names)};
}
